# プロトコル
## ポステルの法則
* 送信は厳格に、受信は寛容に
* 人に話すときには丁寧に、人の話を聞くときには寛容に


# 運用でカバー
## 運用チームの編成
### 運用チーム=開発チーム
* 運用が属人的になりがち
* 運用のための文書整備が後回しになりがち
* 仕様を押えているため各種対応は迅速に可能

### 運用チーム<開発チーム
* 開発段階で運用設計を行うことが多いが、開発難航に伴い運用設計が疎かになる可能性がある。

### 運用チーム!=開発チーム
* 開発物を引き継ぎ運用を行っていく


## 運用でカバーの背景
### 腕の立つ人が運用チームにいる
* スペシャリストがあらゆる要望に応えてしまう（運用設計として含まれていなかった事項）
* スペシャリストが抜けた場合は運用が回らなくなる（属人化）
* 属人化するところは極力排除し、役割と手順の明確化を行い、当該手順に従った運用を行う必要がある。

### 新規業務の場合
* 費用や開発上の制約がない限りは「運用でカバー」という話はあまり入り込む余地がない。

### 既存業務のIT化
* 「現行の仕様」を実現するために、それがどのようなスペックを指すのか明確にしないまま進めると必要な機能が不足する可能性がある。


## 運用でカバーを減少させる
* 属人化を防ぐ
* 開発+運用の費用を見込んで、妥当と考えられる費用計画を策定する
* 「現行通り」がどのような仕様なのかを明確にし、明確になった仕様をどのように運用していくかを早期に決めていく


## 運用でカバーの悪影響
* 「運用でカバー」=「もやっと曖昧な依頼にもかかわらず、運用現場に対して高度な判断能力と機動的な対処能力を常時求めつつ、そのコストとリスクは運用現場に負担させる行為」

### 業務の複雑化
* 「あれをやってくれるなら、これもやってくれるだろう」という一種の「甘えの恒常化」となり、次なる「運用でカバー」の依頼に繋がる。

### 業務の属人化
* ドキュメントが整備されないまま特定の個人の努力に依存するという「業務の属人化」をもたらす。

### 成果の見えない化
* 合理性よりも依頼側の都合が優先されることが少なくないため、運用現場の努力だけで非合理性を回避することが困難。
* 非合理的な業務はあらゆる局面で「隠れ運用コスト」を生み出す=多忙な運用となる。
* 「運用でカバー」には明確なゴールや達成点などの評価軸がない。その結果、経営層や外部からは評価されない。
* 「運用でカバー」により生じた「説明できない業務」は、経営層からは「業務が存在しない」ことに等しく、運用現場は「何も成果が認められていない」ことを意味する。

### 運用現場が抱える3つの問題点
* 高負荷（業務の複雑化）
* 属人的（業務の属人化）
* 見えぬ費用対効果（成果の見えない化）

### 運用の価値
* 「運用でカバー」は「運用の見えない化」をもたらす=「評価されない運用現場」を生み出す。
* 安易な「運用でカバー」は自分たちの価値を下げる。


## 運用でカバーからの脱却
* AsIs（現状）を解消するためのToBe（理想）を知る必要がある。

### 運用でカバーの要素
* もやっとしたあいまいな依頼
* 高度の判断能力と機動的な対処能力を常時要求
* コストとリスクは運用現場負担

### 健全な運用とは
* 「期待」というインプットが明確
* 「任務」というやるべきことが明確
* 「実績」というアウトプットが明確（実績が期待に沿うものであれば成果として認められる）


## 運用現場の任務は「サービスデリバリ」

### サービスの内容を明確化するためサービスカタログを作成する。
* 運用現場が自分たちの「サービス」を知ることができる。
* ユーザ、経営者に「サービス」を知ってもらう。
* カタログはQCDを決定するためある程度粒度が細かいほうがよい（あまり細かいとユーザから見られなくなる）

### サービスカタログの内容
* サービスの名称/識別子
* サービスのプロフィット
* サービスの標準QCD
* サービス責任者/問い合わせ先
* 免責事項


### 作業カタログを作成する
* 「サービス」ごとに必要な作業一覧を作成する。
* 各作業カタログについて、その作業が属人的か否かを判断基準として「定常作業」と「非定常作業」に分類する。
* 作業カタログの各作業について平均日作業単価（時間）を記録することで定量的な実績を残すことができる。

### 作業フローを明確化する
* Inbound（リクエストを受ける）
* 前処理
* 本処理
* 後処理
* Outbound（成果物をユーザにデリバリする）

### 運用基盤の整備
* ドキュメント
　正確な作業内容の確認に必須
　対外的に作業の存在を示すことで運用作業の価値を維持し、事業継続性を担保する
　環境変化への対応や業務改善による作業フローの変更をしやすくする。「なぜ」そういう作業になっているのかの理由を意識して記録することが大切。

* スキルセット
* ツール


## 非合理的な運用業務の特徴
* 意見や分析が主観的になりがち（主観的）
* 論理的な説明がなかなかできない（非論理的）
* 実績が感覚値で論じられがち（非科学的）
* やりっぱなしになりがち（非サイクル性）
* 精神論的に「がんばればなんとかなる」というのは机上の空論に過ぎない。精神論で頑張った結果が「運用でカバー」であり、運用現場の業務の非合理化につながる。

## 問題を根性で解決するな
* 問題を根性で解決するのはバカ。エンジニアリングで解決するのがエンジニア。
* 「夜中まで/土日も仕事すればなんとかなる」はバカ。そうならないようにエンジニアリングで解決する。
* 「運用でカバー」は評価されない。自分たちでは何が起こっているかも、どのように解決してよいかもわからない問題を解決してしまうことに対して、その成果をなるべく低く評価し、無視する


# To-Be と As-Is


# Linux Command
## 15分以内に更新されたファイルを探す
```
find / -min -15 -type f > /tmp/newfiles.txt
```

## 上記コマンド結果から不要なものを除いてファイルサイズを表示する
```
cat /tmp/newfiles.txt | grep -vE "^/(proc|sys)" | xargs ls -al
```

## 上記コマンドでファイルサイズの大きい順に並び替えて表示
```
cat /tmp/newfiles.txt | grep -vE "^/(proc|sys)" | xargs ls -al | sort -n -r -k 5 | head
```

## 文字列抽出
```
grep word * --color
ps -aux | grep [h]ttpd
```

## 変数を使った方法
変数の存在を確認し定義されていなければコマンド実行しない。
```
TARGET_FILE=abc.txt
cat ${TARGET_FILES:?}
```

## ファイル比較
```
diff A B && 'check ok'
diff <(python print.py) <(python print2.py)
```

## 特定文字列を含むファイルの検索
findで引っかかったファイルの中身を確認
```
find ./testdir -name "*del*" -print | xargs cat
```

## 別のサーバでバックアップアーカイブを作る
```
tar zcvf - ./backupdir/ | ssh ${username}@${ip_address} "cat - > /tmp/send.tar.gz"
```

## Apache ログ解析
### 特定時間のログ取得
```
cat /var/log/httpd/access_log | grep "30/Dec/2014:16"
cat /var/log/httpd/access_log | grep "30/Dec/2014:16" | awk '{print $11}'
cat /var/log/httpd/access_log | grep "30/Dec/2014:16" | awk '{print $11}' | sort | uniq -c | sort -nr
```


## リソース
### インストール
````
yum install sysstat dstat tcpdump vnstat wireshark
````

### CPU負荷
```
top
top -b -d 1 -n 5
ps -ae -o pid,pcpu,rss,time,cmd | sort -nr -k 2 (CPU使用率順)
ps -ae -o pid,pcpu,rss,time,cmd | sort -nr -k 3 (Mem使用率順)
```
* 8番目のフィールド（プロセス状態）に着目。「R」と表示されるプロセスは実行（可能）状態でありCPUリソースを消費している。
* さらに9番目のCPU使用率が継続的に高くなっている場合はCPUがボトルネックの可能性がある。
* 「D」になっている場合はストレージのIO完了待ち。ストレージがボトルネック。
* 「S」はスリープ、もしくはNW送受信イベント待ち。NWがボトルネックの可能性あり。
* -b で実行するとバッチモードで起動できる。

### CPU/ストレージ
```
vmstat 1
```
* cpu欄のid=idle, wa=storage io なのでwaが高いとストレージボトルネック

### CPU（複数コア）
```
mpstat -P ALL 1
```

### メモリ（MB単位）
```
free -tm
free -s 2 (2秒おきに表示)
```


### ストレージ
```
iostat -dmxt 1
iostat -dmxt 1 | grep ${DeviceName}

du -sk /opt/* | sort -nr
```

### NW
```
vnstat -i eth0 -l

tcpdump -i lo
tcpdump -s0 -A port 80 and host www.google.com
tcpdump dst -i eth0 port 10080
tcpdump src -i eth0 port 10080

tshark -i lo -n
tshark -i eth0 -f 'port 80 and host www.google.com'
tshark -i eth0 -f 'port 80 and host www.google.com' -w /tmp/wireshark.cap
tshark -r /tmp/wireshark.cap
tshark -i lo -V
```

### Utility
* 継続確認
```
watch -n 5 "ls -l"
```

* プロセス数の確認
```
ps -aef | grep [h]ttpd | wc -l
```

* コネクション数の確認
```
netstat -an | grep ESTABLISHED | grep :80 | wc -l
```

* 複数ログの同時確認
```
tail -f /var/log/messages /var/log/httpd/access_log
tail -f /var/log/messages /var/log/httpd/access_log | tee /tmp/tmplog.txt
tail -f /var/log/httpd/*
```

* 検索オプション組み合わせ
```
find /var/log -name "*log" -mtime -3 -type f
```

* testコマンド
```
test -e file.txt
test -d directory
echo $?
```

* 古いログファイルを圧縮
```
find /var/log -name "*log" -mtime -3 -type f | xargs -n1 gzip --best
```

* 複数のログファイルから特定アクセスを抽出
```
find /var/log -name "*log" -type f | grep -e "^127.0.0.1.*"
```


# システム運用・保守のドキュメント目次（引き継ぎ項目）
* ハードウェア構成
　サーバ（ハードウェア情報、パーティション情報）
　周辺機器（UPS、電源）

* システム運転構成
　サーバ配置図
　ハードウェア環境条件（指標値）

* ソフトウェア構成
　OS（アカウント管理状況、セットアップ情報）
　サーバプログラム連携状況

* ネットワーク構成
　ネットワーク設定
　DNS情報

* アプリケーション開発・構成
　開発環境（ビルド方法、デプロイ方法）
　利用ライブライ状況

* 運用監視（異常時対応）・注意事項
　通知系メールの宛先
　定期点検・保守用タスクスケジューラ
　トラブル確認・復旧手順

* 運用管理者業務
　運用ルール・トラブル回避
　各種イベント

* 契約情報（契約書、担当者、連絡先）
　サーバ関係（ホスティング先など）
　ネットワーク関係
　その他（利用している各種外部サービス）のIDとパスワード


# 業務を文書化する=他からの「見える化」を行えるようになる
* 要因を可能な限り交換可能にできる（属人性の排除）
* 技術の平滑化を行える（容易な引き継ぎ）
* システム上の無駄を洗い出せる（効率化）
* 作業量の顕在化を行える（人件費の妥当性証明、要因規模の見積もり）

# 業務の分類（業務マップ作成）
* 日常業務（ルーチンワーク、事前に予定することのできる業務）
* 非日常業務（アラート・故障対応など）

業務マップは初回作成時には過去3か月～半年以内に行った業務で行う。
また、一定期間ごとに定期的に時間を設け、業務マップの更新を行う。

# 文書化
* 文書化を片手間の仕事として割り当てず、正規の仕事にする。（文書化は片手間にできるものではない）
* 日常業務の中で文書化が自然に回るように工夫して組み込む。（文書化のためだけに日常の業務を起こさない）



# VIM
|キーボード|動作  |
|:--     |:--  |
|G       |ファイル末尾|
|gg      |ファイル先頭|
|0       |行頭|
|$       |行末|
|t[string]|行内の該当文字列へ移動|


# アクセス解析
* ページビュー（PV）
* リクエスト数
 * ウェブページ
 * WebAPI
* ブラウザ
* リファラー
* HTTPエラーコード


# cron設定
crontab -l > crontab.conf
crontab crontab.conf
-> 設定ファイルを元にしたクーロン設定が可能


# Windowsでおススメのソフトウェア
* desktoplistview - https://code.google.com/p/desktoplistview/

# Google Chrome Plugin
* ato-ichinen - https://chrome.google.com/webstore/detail/ato-ichinen/pojaolkbbklmcifckclknpolncdmbaph/related?hl=ja
